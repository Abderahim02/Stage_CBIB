params {
    // Modes: run_standard, run_dataset, generate_and_run
    mode = "run_dataset"
    standard = "none" // This needs to be specified if mode is run_standard
    sc_type = "seurat"
    sp_type = "synthvisium"
    annot = "subclass"
    remap_annot = false // provide an absolute file directory
    sampleID = "none"
    deconv_args = []
    synvis = []
    methods = "music,rctd,spotlight,stereoscope,cell2location"
    gpu = false
    cuda_device = 0 // only matters if gpu is true
    verbose = false
    
    runID_props = ""
    runID_metrics = ""
}


manifest {
    author = 'Chananchida Sang-aram'
    description = 'Pipeline for benchmarking spatial deconvolution and mapping tools'
    mainScript = 'main.nf'
    version = '0.1'
    defaultBranch = 'main'
}

profiles {
    local {
        process.executor = 'local'
        
        params {
            rootdir = '/mnt/d/spade-benchmark'
            outdir = [props: "${params.rootdir}/deconv_proportions",
                      metrics: "${params.rootdir}/results",
                      synvis: "${params.rootdir}/synthetic_data/"]
            sc_input = "${params.rootdir}/unit-test/test_sc_data.rds"
            sp_input = "${params.rootdir}/unit-test/test_sp_data.rds"
            epoch_build = 10
            epoch_fit = 10
        }
        workDir = "${params.rootdir}/work"
        docker.runOptions = "--mount type=bind,source=/mnt/d,target=/mnt/d"
    }

    docker {
        docker.enabled = true
        singularity.enabled = false
    }

    prism {
        process {
            executor = "sge"
            penv = "serial"
            cpus = 4

            // Default shell is csh -> change to bash
            // "memory" directive uses h_rss instead of h_vmem
            clusterOptions = { "-S /bin/bash -l h_vmem=8G -N ${task.tag}" }
            
            // More intensive processes, increase number of cores, also allow retries
            withLabel: retry {
                errorStrategy = 'retry'
                maxRetries = 2
                cpus = { task.attempt * 12 }
            }     
            
        }

        singularity {
            enabled = true
            cacheDir = "/group/irc/shared/spade_benchmark/singularity"
        }

        // Script parameters
        params {
            rootdir = "$HOME/spade-benchmark"
            outdir = [props: "${params.rootdir}/deconv_proportions",
                      metrics: "${params.rootdir}/results",
                      synvis: "${params.rootdir}/synthetic_data/"]
            sc_input = "${params.rootdir}/unit-test/test_sc_data.rds"
            sp_input = "${params.rootdir}/unit-test/test_sp_data.rds"
            epoch_build = "default"
            epoch_fit = "default"
        }

        workDir = "${params.rootdir}/work"

        // Trace
        trace {
            enabled = false // need to install procps in the containers
            fields = 'task_id,hash,native_id,name,status,exit,container,cpus,disk,memory,attempt,realtime,%cpu,%mem,rss,peak_rss,vmem,peak_vmem'
        }
    }

    hpc {
        process {
            executor = "slurm"
            cpus = 4
            memory = "8 GB"
            time = "1h"

            clusterOptions = "--mail-type FAIL --mail-user chananchidas@irc.vib-ugent.be"

            // More intensive processes, increase number of resources, also allow retries
            withLabel: retry {
                errorStrategy = 'retry'
                maxRetries = 2
                cpus = { task.attempt * 4 }
                memory = { "${task.attempt * 8} GB" }
                time = { "${task.attempt * 3}h" }
            }

            withLabel: use_gpu {
                clusterOptions = "--gres=gpu:1 --mail-type FAIL --mail-user chananchidas@irc.vib-ugent.be"
                containerOptions = "--nv"
            }
            
        }

        singularity {
            enabled = true
            cacheDir = "$VSC_SCRATCH_KYUKON_VO_USER/singularity"
        }

        workDir = "$VSC_SCRATCH_KYUKON_VO_USER/work"

        // Script parameters
        params {
            rootdir = "$VSC_DATA/spade-benchmark"
            outdir = [props: "${params.rootdir}/deconv_proportions",
                      metrics: "${params.rootdir}/results",
                      synvis: "${params.rootdir}/synthetic_data/"]
            sc_input = "${params.rootdir}/unit-test/test_sc_data.rds"
            sp_input = "${params.rootdir}/unit-test/test_sp_data.rds"
            epoch_build = "default"
            epoch_fit = "default"
        }
    }

    test { includeConfig 'conf/test.config' }

}
