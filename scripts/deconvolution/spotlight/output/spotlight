#!/usr/bin/env bash

#########################
#    spotlight 0.1.7    #
#########################

# This wrapper script is auto-generated by viash 0.4.0.1 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
VIASH_EXEC_MODE="run"

function ViashSetup {
:
}


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "Run the SPOTlight deconvolution algorithm."
   echo
   echo "Options:"
    echo "    --sc_input=file"
    echo "        type: file, required parameter"
    echo "        input single-cell reference (rds)"
    echo ""
    echo "    --sp_input=file"
    echo "        type: file, required parameter"
    echo "        input spatial data to be deconvolved"
    echo ""
    echo "    --annot=string"
    echo "        type: string, default: celltype"
    echo "        name of the cell type annotation column"
    echo ""
    echo "    --output=file"
    echo "        type: file, default: proportions.tsv"
    echo "        path of the output tsv file that will contain the proportions"
    echo ""
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit;;
        ---setup)
            VIASH_EXEC_MODE="setup"
            shift 1
            ;;
        ---push)
            VIASH_EXEC_MODE="push"
            shift 1
            ;;
        --sc_input)
            VIASH_PAR_SC_INPUT="$2"
            shift 2
            ;;
        --sc_input=*)
            VIASH_PAR_SC_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --sp_input)
            VIASH_PAR_SP_INPUT="$2"
            shift 2
            ;;
        --sp_input=*)
            VIASH_PAR_SP_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --annot)
            VIASH_PAR_ANNOT="$2"
            shift 2
            ;;
        --annot=*)
            VIASH_PAR_ANNOT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

if [ "$VIASH_EXEC_MODE" == "setup" ]; then
  ViashSetup
  exit 0
fi

if [ "$VIASH_EXEC_MODE" == "push" ]; then
  ViashPush
  exit 0
fi

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_SC_INPUT" ]; then
  echo '--sc_input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_SP_INPUT" ]; then
  echo '--sp_input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_ANNOT" ]; then
  VIASH_PAR_ANNOT="celltype"
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT="proportions.tsv"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_SC_INPUT" ] && [ ! -e "$VIASH_PAR_SC_INPUT" ]; then
  echo "File '$VIASH_PAR_SC_INPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_SP_INPUT" ] && [ ! -e "$VIASH_PAR_SP_INPUT" ]; then
  echo "File '$VIASH_PAR_SP_INPUT' does not exist."
  exit 1
fi

cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-spotlight-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par <- list(
  "sc_input" = $( if [ ! -z ${VIASH_PAR_SC_INPUT+x} ]; then echo "'$VIASH_PAR_SC_INPUT'"; else echo NULL; fi ),
  "sp_input" = $( if [ ! -z ${VIASH_PAR_SP_INPUT+x} ]; then echo "'$VIASH_PAR_SP_INPUT'"; else echo NULL; fi ),
  "annot" = $( if [ ! -z ${VIASH_PAR_ANNOT+x} ]; then echo "'$VIASH_PAR_ANNOT'"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH START
## VIASH END

# Read and preprocess single-cell RNA data
cat("Reading input scRNA-seq reference...")
seurat_obj_scRNA <- readRDS(par\$sc_input)
ncelltypes <- length(unique(seurat_obj_scRNA[[par\$annot, drop=TRUE]]))
cat("Found", ncelltypes, "cell types in the reference.\\n")

cat("Preprocessing input scRNA-seq reference...\\n")
seurat_obj_scRNA <- Seurat::SCTransform(seurat_obj_scRNA, verbose = FALSE)
Seurat::Idents(object = seurat_obj_scRNA) <- seurat_obj_scRNA[[par\$annot, drop=TRUE]]

# Compute marker genes
cat("Computing marker genes...\\n")
cluster_markers_all <- Seurat::FindAllMarkers(object = seurat_obj_scRNA,
                                              assay = "SCT", slot = "data",
                                              verbose = TRUE, 
                                              only.pos = TRUE,
                                              logfc.threshold = 1, min.pct = 0.9) # To speed things up

# Run SPOTlight
cat("Reading input spatial data...\\n")
set.seed(123)
synthetic_visium_data <- readRDS(par\$sp_input)
seurat_obj_visium <- Seurat::CreateSeuratObject(counts = synthetic_visium_data\$counts, assay = "Spatial")
seurat_obj_visium <- Seurat::SCTransform(seurat_obj_visium, assay = "Spatial", verbose = FALSE)

cat("Running deconvolution tool...\\n")
start_time <- Sys.time()
spotlight_deconv <- SPOTlight::spotlight_deconvolution(se_sc = seurat_obj_scRNA,
                                                       counts_spatial = seurat_obj_visium@assays\$Spatial@counts,
                                                       clust_vr = par\$annot, cluster_markers = cluster_markers_all,
                                                       cl_n = 10,         # Number of cells per cell type to use
                                                       hvg = 2000,         # Number of HVGs to use
                                                       ntop = 20,        # How many of the marker genes to use (by default all)
                                                       transf = "uv",      # Perform unit-variance scaling per cell and spot prior to factorzation and NLS
                                                       method = "nsNMF",   # Factorization method
                                                       min_cont = 0.09)       # Remove those cells contributing to a spot below a certain threshold 
end_time <- Sys.time()
cat("Runtime: ", round((end_time-start_time)[[1]], 2), "s\\n", sep="")

cat("Printing results...\\n")
deconv_matrix <- spotlight_deconv[[2]][,1:ncelltypes]

# Remove all spaces and dots from cell names, sort them
colnames(deconv_matrix) <- stringr::str_replace_all(colnames(deconv_matrix), "[/ .]", "")
deconv_matrix <- deconv_matrix[,sort(colnames(deconv_matrix), method="shell")]

write.table(deconv_matrix, file=par\$output, sep="\\t", quote=FALSE, row.names=FALSE)
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
